#include <iostream>
#include <queue>
using namespace std;

class AvlTree {

public:
	int data;
	class AvlTree * left;
	class AvlTree * right;
	int height;
	AvlTree(int data) {
		this->data = data;
		left = nullptr;
		right = nullptr;
		height = 1;
	}

	int max(int a, int b) {
		if (a > b) {
			return a;
		}
		return b;
	}

	int getBalance(AvlTree * node) {

		return heightt(node->left) - heightt(node->right);
	}

	AvlTree * leftRotate(AvlTree * node) {
		AvlTree * newRoot = node->right;
		AvlTree * tmp = newRoot->left;
		newRoot->left = node;
		node->right = tmp;

		node->height = max(heightt(node->left), heightt(node->right)) + 1;
		newRoot->height = max(heightt(node->left), heightt(node->right)) + 1;
		return newRoot;
	}

	AvlTree * rightRotate(AvlTree * node) {

		AvlTree * newRoot = node->left;
		AvlTree * tmp = newRoot->right;
		newRoot->right = node;
		node->left = tmp;

		node->height = max(heightt(node->left), heightt(node->right)) + 1;
		newRoot->height = max(heightt(node->left), heightt(node->right)) + 1;
		return newRoot;
	}

	int heightt(AvlTree * node) {
		if (!node) {
			return 0;
		}
		return node->height;
	}

	AvlTree * insert(AvlTree * root, int data) {
		AvlTree * newNode = new AvlTree(data);
		if (root == nullptr) {
			return newNode;
		}

		if (data < root->data) {
			root->left = insert(root->left, data);
		}
		else {
			root->right = insert(root->right, data);
		}
		root->height = max(heightt(root->left),heightt(root->right));
		root->height++;

		int bal = getBalance(root);

		if (bal > 1 && data < root->left->data) {
			return rightRotate(root);
		}
		if (bal < -1 && data > root->right->data) {
			return leftRotate(root);
		}
		if (bal > 1 && data > root->left->data) {
			root->left = leftRotate(root->left);
			return rightRotate(root);
		}
		if (bal < -1 && data < root->right->data) {
			root->right = rightRotate(root->right);
			return leftRotate(root);
		}

		return root;
	}

	void BFS(AvlTree * root) {

		queue <AvlTree*> q;
		q.push(root);
		AvlTree * tmp;
		int cnt;

		while (!q.empty()) {
			cnt = q.size();
			for (int i = 0; i < cnt; i++) {
				tmp = q.front();
				q.pop();
				if (tmp->left != nullptr) {
					q.push(tmp->left);
				}
				if (tmp->right != nullptr) {
					q.push(tmp->right);
				}
				cout << tmp->data << ' ';
			}
			cout << endl;
		}

	}
};

int main() {

	AvlTree *root = new AvlTree(10);

	root = root ->insert(root, 11);
	root = root->insert(root, 21);
	root = root->insert(root, 31);
	root = root->insert(root, 41);
	root = root->insert(root, 51);
	root = root->insert(root, 61);

	root->BFS(root);

}
